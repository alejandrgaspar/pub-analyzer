"""Topics models from OpenAlex API Schema definition."""

from pydantic import BaseModel, HttpUrl


class TopicIDs(BaseModel):
    """External identifiers for a Topic."""

    openalex: HttpUrl
    """The OpenAlex ID for this Topic."""
    wikipedia: HttpUrl | None = None
    """This topic's Wikipedia page URL."""


class TopicLevel(BaseModel):
    """Topic level information."""

    id: HttpUrl
    """ID for the topic level. For more info, consult the
       [OpenAlex topic mapping table](https://docs.google.com/spreadsheets/d/1v-MAq64x4YjhO7RWcB-yrKV5D_2vOOsxl4u6GBKEXY8/){target=_blank}.
    """
    display_name: str
    """The English-language label of the level."""


class DehydratedTopic(BaseModel):
    """Stripped-down Topic Model."""

    id: HttpUrl
    """The OpenAlex ID for this Topic."""
    display_name: str
    """The English-language label of the topic."""
    score: float
    """The strength of the connection between the work and this topic (higher is stronger)."""

    domain: TopicLevel
    """The highest level in the Topics structure."""
    field: TopicLevel
    """The second-highest level in the Topics structure."""
    subfield: TopicLevel
    """The third-highest level in the Topics structure."""


class Topic(DehydratedTopic):
    """Labels which can be used to describe what a paper is about."""

    ids: TopicIDs
    """All the external identifiers for a Topic."""
    description: str
    """A description of this topic, generated by AI."""
    keywords: list[str]
    """Keywords consisting of one or several words each, meant to represent
       the content of the papers in the topic.
    """

    works_count: int
    """The number of works tagged with this topic."""
    cited_by_count: int
    """The number of citations to works that have been tagged with this topic."""
